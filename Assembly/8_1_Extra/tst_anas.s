.section .text
.align 2
.global _start
_start:
    ldr r0, =_data
    ldr r1, [r0]
    cmp r1, #0xA
    beq _end

    cmp r1, #0x60
    bgt _gt_0x60
    ble _not_gt_0x60

_gt_0x60:
    cmp    r1, #0x7B
    sublt  r1, #0x20
    strlt  r1, [r0]

_not_gt_0x60:
    cmp    r1, #0x20
    moveq  r2, #0x1
    movne  r2, #0x0

_loop:
    ldr r1, [r0, #4]!
    cmp r1, #0xA
    beq _end

    cmp r1, #0x60 
    bgt _gt_0x60_loop @ lt will also enter _gt_0x60_loop

_gt_0x60_loop:
    cmp r1, #0x7B
    blt _gt_0x60_loop_lt_0x7B
    beq _capt

_gt_0x60_loop_lt_0x7B:
    cmp r2, #0x1
    beq _capt
    bne _skip

_capt: 
    sub r1, r1, #0x20
    str r1, [r0]

_skip:
    cmp r1, #0x20
    moveq r2, #0x1
    movne r2, #0x2
    b _loop

_end:
    b _end


.section .data
_data:
@Hi I know how to code with ARM assembly
.word 0x48, 0x69, 0x20, 0x49, 0x20, 0x6B, 0x6E, 0x6F, 0x77, 0x20, 0x68, 0x6F, 0x77, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x41, 0x52, 0x4D, 0x20, 0x61, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x0A

